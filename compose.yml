services:
  api:
    build: 
      context: ./back
      dockerfile: Dockerfile
    container_name: camera_rental_api
    ports:
      - "3000:3000"
    depends_on:
      - postgres
    environment:
      DB_DIALECT: postgres
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: postgres
      DB_PASSWORD: postgres
      DB_NAME: camera_rental
      JWT_SECRET: 449ad50f394e042b37d6d038083adb5d595c633563d67449f6a86ad92e9bdcd622691a8a2a256c111ffed26c558e84f815f1b3935d5b39018495077335b0b02699bbf127861a3337e287ca1fc2ba83a24530e95bce194b8d1a2b6922a2007ff7af8fab975dc9f466f686fc8d63371071a53cd635eac91dd54ab805a3e5fa7dc8706ac92f930dcbc36d837af12f5966ca20680c60d12b7f651f377da0b614233569d3ea77b369f10fc4879e5a2a96716254d7d2de07959fc0fec6ec944679d7c1e9399f4cffd9e071b352351ec4e09a67bea357f95f5e20f768ea4cd568734aa25169c8b380b4f17332807b70b80cc3ad31873ffe65d3088177f8c4d85a976bae
  postgres:
    build:
      context: ./database
      dockerfile: Dockerfile
    container_name: camera_rental_db
    environment:
      POSTGRES_DB: camera_rental
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
  front:
    build:
      context: ./front
      dockerfile: Dockerfile
    container_name: camera_rental_front
    ports:
      - "80:80"
    depends_on:
      - api
